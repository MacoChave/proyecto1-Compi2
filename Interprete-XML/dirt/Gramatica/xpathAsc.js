/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xpathAsc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31],$V1=[2,9],$V2=[1,6],$V3=[5,6],$V4=[2,4],$V5=[1,28],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,15],$Vb=[1,16],$Vc=[1,17],$Vd=[1,18],$Ve=[1,19],$Vf=[1,20],$Vg=[1,21],$Vh=[1,22],$Vi=[1,23],$Vj=[1,24],$Vk=[1,25],$Vl=[1,26],$Vm=[1,29],$Vn=[2,5,6,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31],$Vo=[1,55],$Vp=[1,51],$Vq=[1,52],$Vr=[1,53],$Vs=[1,54],$Vt=[1,56],$Vu=[1,57],$Vv=[1,58],$Vw=[1,59],$Vx=[2,5,6,11,12,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,35,36,37,38,39,40,41,42,43,44,45,46,47,49],$Vy=[1,76],$Vz=[1,74],$VA=[1,75],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[1,84],$VJ=[1,85],$VK=[1,86],$VL=[27,35,36,37,38,39,40,41,42,43,44,45,46,47,49],$VM=[35,36,37,39,40,41,42,43,44,45,46,49],$VN=[35,39,40,41,42,43,44,45,46,49];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"PATHS":4,"EOF":5,"|":6,"PATH":7,"NODES":8,"SLASH":9,"EL":10,"div":11,"id":12,"PRE":13,"resParent":14,"::":15,"resChild":16,"resSelf":17,"resPrec":18,"resPrecSibling":19,"resAttribute":20,"resDesc":21,"resDescSelf":22,"resAnc":23,"resAncSelf":24,"resFollow":25,"resFollowSibling":26,"*":27,"..":28,".":29,"ATTR":30,"@":31,"ATTR_P":32,"[":33,"E":34,"]":35,"+":36,"-":37,"opDiv":38,"=":39,"!=":40,"<":41,">":42,"<=":43,">=":44,"opOr":45,"opAnd":46,"opMod":47,"(":48,")":49,"double":50,"integer":51,"StringLiteral":52,"resLast":53,"resPosition":54,"resText":55,"resNode":56,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"|",11:"div",12:"id",14:"resParent",15:"::",16:"resChild",17:"resSelf",18:"resPrec",19:"resPrecSibling",20:"resAttribute",21:"resDesc",22:"resDescSelf",23:"resAnc",24:"resAncSelf",25:"resFollow",26:"resFollowSibling",27:"*",28:"..",29:".",31:"@",33:"[",35:"]",36:"+",37:"-",38:"opDiv",39:"=",40:"!=",41:"<",42:">",43:"<=",44:">=",45:"opOr",46:"opAnd",47:"opMod",48:"(",49:")",50:"double",51:"integer",52:"StringLiteral",53:"resLast",54:"resPosition",55:"resText",56:"resNode"},
productions_: [0,[3,2],[4,3],[4,1],[7,1],[8,3],[8,2],[9,2],[9,1],[9,0],[10,1],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,1],[10,1],[10,1],[10,1],[10,1],[30,2],[32,1],[32,1],[13,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,1],[34,1],[34,1],[34,1],[34,3],[34,3],[34,3],[34,3],[34,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                                    this.$ =    { 
                                                XPath: $$[$0-1],
                                                SyntaxErrors: xPathAscSyntaxErrors,
                                                LexerErrors: xPathAscLexerErrors
                                            };

                                    var nodo = {
                                        name: 'START',
                                        val: 'START',
                                        children: [xPathAscAST_path]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}

                                    xPathAscLexerErrors = [];
                                    xPathAscSyntaxErrors = [];

                                    return this.$; 
                                
break;
case 2:
 
                                    $$[$0-2].push($$[$0]) 
                                    this.$ = $$[$0-2]
                                    var nodo = {
                                        name: 'PATHS', 
                                        val: 'PATHS', 
                                        children: [
                                            xPathAscAST_path,
                                            {name: '|', val: '|', children: []},
                                            xPathAscAST_pathAux
                                        ]
                                    }
                                    xPathAscAST_path = nodo
                                
break;
case 3:
 
                                    this.$ = [$$[$0]]
                                    var nodo = {name: 'PATHS', val: 'PATHS', children: [xPathAscAST_pathAux]}
                                    xPathAscAST_path = nodo
                                
break;
case 4:
 
                                    this.$ = $$[$0] 
                                    var nodo = {name: 'PATH', val: 'PATH', children: [xPathAscAST_nodes]}
                                    // this.$ = {...this.$, Nodo: nodo}
                                    xPathAscAST_pathAux = nodo
                                
break;
case 5:

                                    $$[$0].slashes = $$[$0-1].count
                                    $$[$0-2].push($$[$0])
                                    this.$ = $$[$0-2]
                                    var nodo = {
                                        name: 'NODES',
                                        val: 'NODES',
                                        children: [
                                            xPathAscAST_nodes,
                                            $$[$0].Nodo
                                        ]
                                    }
                                    xPathAscAST_nodes = nodo
                                
break;
case 6:

                                    $$[$0].slashes = $$[$0-1].count
                                    this.$ = [$$[$0]]
                                    var nodo = {
                                        name: 'NODES',
                                        val: 'NODES',
                                        children: [
                                            $$[$0-1].Nodo
                                        ]
                                    }
                                    xPathAscAST_nodes = nodo
                                
break;
case 7:
 
                                    this.$ = { count: 2 }
                                    var nodo = {
                                        name: 'SLASH',
                                        val: 'SLASH',
                                        children: [
                                            {name: 'div', val: '/', children: []},
                                            {name: 'div', val: '/', children: []},
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 8:
 
                                    this.$ = { count: 1 }
                                    var nodo = {
                                        name: 'SLASH',
                                        val: 'SLASH',
                                        children: [{name: 'div', val: '/', children: []}]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 9:
 
                                    this.$ = { count: 0 }
                                    var nodo = {
                                        name: 'SLASH',
                                        val: 'SLASH',
                                        children: []
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 10:
 
                                    this.$ = new Element($$[$0], TypeElement.NODO, undefined, 1, _$[$0].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [{name: 'id', val: $$[$0], children: []},]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 11:
 
                                    this.$ = new Element($$[$0-1], TypeElement.NODO, $$[$0], 1, _$[$0-1].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [{name: 'id', val: $$[$0-1], children: []},{name: 'PRE', val: $$[$0], children: []}]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 12:
 
                                    this.$ = new Element($$[$0], TypeElement.NODO, undefined, 1, _$[$0-2].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [
                                            {name: 'resParent', val: $$[$0-2], children: []}, 
                                            {name: 'id', val: $$[$0], children: []}
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 13:
 
                                    this.$ = new Element($$[$0], TypeElement.NODO, undefined, 1, _$[$0-2].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [
                                            {name: 'resChild', val: $$[$0-2], children: []}, 
                                            {name: 'id', val: $$[$0], children: []}
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 14:
 
                                    this.$ = new Element($$[$0], TypeElement.NODO, undefined, 1, _$[$0-2].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [
                                            {name: 'resSelf', val: $$[$0-2], children: []}, 
                                            {name: 'id', val: $$[$0], children: []}
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 15:
 
                                    this.$ = new Element($$[$0], TypeElement.NODO, undefined, 1, _$[$0-2].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [
                                            {name: 'resPrec', val: $$[$0-2], children: []}, 
                                            {name: 'id', val: $$[$0], children: []}
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 16:
 
                                    this.$ = new Element($$[$0], TypeElement.NODO, undefined, 1, _$[$0-2].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [
                                            {name: 'resPrecSibling', val: $$[$0-2], children: []}, 
                                            {name: 'id', val: $$[$0], children: []}
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 17:
 
                                    this.$ = new Element($$[$0], TypeElement.NODO, undefined, 1, _$[$0-2].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [
                                            {name: 'resAttribute', val: $$[$0-2], children: []}, 
                                            {name: 'id', val: $$[$0], children: []}
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 18:
 
                                    this.$ = new Element($$[$0], TypeElement.NODO, undefined, 1, _$[$0-2].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [
                                            {name: 'resDesc', val: $$[$0-2], children: []}, 
                                            {name: 'id', val: $$[$0], children: []}
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 19:
 
                                    this.$ = new Element($$[$0], TypeElement.NODO, undefined, 1, _$[$0-2].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [
                                            {name: 'resDescSelf', val: $$[$0-2], children: []}, 
                                            {name: 'id', val: $$[$0], children: []}
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 20:
 
                                    this.$ = new Element($$[$0], TypeElement.NODO, undefined, 1, _$[$0-2].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [
                                            {name: 'resAnc', val: $$[$0-2], children: []}, 
                                            {name: 'id', val: $$[$0], children: []}
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 21:
 
                                    this.$ = new Element($$[$0], TypeElement.NODO, undefined, 1, _$[$0-2].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [
                                            {name: 'resAncSelf', val: $$[$0-2], children: []}, 
                                            {name: 'id', val: $$[$0], children: []}
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 22:
 
                                    this.$ = new Element($$[$0], TypeElement.NODO, undefined, 1, _$[$0-2].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [
                                            {name: 'resFollow', val: $$[$0-2], children: []}, 
                                            {name: 'id', val: $$[$0], children: []}
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 23:
 
                                    this.$ = new Element($$[$0], TypeElement.NODO, undefined, 1, _$[$0-2].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [
                                            {name: 'resFollowSibling', val: $$[$0-2], children: []}, 
                                            {name: 'id', val: $$[$0], children: []}
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 24:
 
                                    this.$ = new Element('', TypeElement.ALL, [], 1, _$[$0].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [{name: '*', val: '*', children: []}]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 25:
 
                                    this.$ = new Element('', TypeElement.PARENT, [], 1, _$[$0].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [{name: '..', val: '..', children: []}]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 26:
 
                                    this.$ = new Element('', TypeElement.CURRENT, [], 1, _$[$0].first_column) 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [{name: '.', val: '.', children: []}]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 27:
 
                                    this.$ = $$[$0] 
                                    var nodo = {
                                        name: 'EL',
                                        val: 'EL',
                                        children: [$$[$0].Nodo]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 28:
 
                                    var xPathSyntaxAscError = new Error(
                                        yytext,
                                        this._$.first_line,
                                        this._$.first_column,
                                        'Error sintáctico'    
                                    )
                                    xPathAscSyntaxErrors.push(xPathSyntaxAscError) 
                                
break;
case 29:
 
                                    this.$ = $$[$0] 
                                    var nodo = {
                                        name: 'ATTR',
                                        val: 'ATTR',
                                        children: [
                                            {name: '@', val: '@', children: []},
                                            $$[$0].Nodo
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 30:
 
                                    this.$ = new Element($$[$0], TypeElement.ATRIBUTO, [], 1, _$[$0].first_column)
                                    var nodo = {
                                        name: 'ATTR_P',
                                        val: 'ATTR_P',
                                        children: [{name: 'id', val: $$[$0], children: []}]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 31:
 
                                    this.$ = new Element($$[$0], TypeElement.ALL_ATRIBUTO, [], 1, _$[$0].first_column)
                                    var nodo = {
                                        name: 'ATTR_P',
                                        val: 'ATTR_P',
                                        children: [{name: '*', val: '*', children: []}]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 32:
 
                                    this.$ = $$[$0-1] 
                                    var nodo = {
                                        name: 'PRE',
                                        val: 'PRE',
                                        children: [
                                            {name: '{', val: '{', children: []},
                                            $$[$0-1].Nodo,
                                            {name: '}', val: '}', children: []},
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 33:
 
                                    
                                    var op = new Operation(1, _$[$0-2].first_column, TypeOperation.SUMA)
                                    op.saveBinaryOp($$[$0-2], $$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [
                                            $$[$0-2].Nodo,
                                            {name: '+', val: '+', children: []},
                                            $$[$0].Nodo
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 34:
 
                                    
                                    var op = new Operation(1, _$[$0-2].first_column, TypeOperation.RESTA)
                                    op.saveBinaryOp($$[$0-2], $$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [
                                            $$[$0-2].Nodo,
                                            {name: '-', val: '-', children: []},
                                            $$[$0].Nodo
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 35:
 
                                    
                                    var op = new Operation(1, _$[$0-2].first_column, TypeOperation.MULTIPLICACION)
                                    op.saveBinaryOp($$[$0-2], $$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [
                                            $$[$0-2].Nodo,
                                            {name: '*', val: '*', children: []},
                                            $$[$0].Nodo
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 36:
 
                                    
                                    var op = new Operation(1, _$[$0-2].first_column, TypeOperation.DIVISION)
                                    op.saveBinaryOp($$[$0-2], $$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [
                                            $$[$0-2].Nodo,
                                            {name: 'div', val: 'div', children: []},
                                            $$[$0].Nodo
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 37:
 
                                    
                                    var op = new Operation(1, _$[$0-2].first_column, TypeOperation.IGUAL)
                                    op.saveBinaryOp($$[$0-2], $$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [
                                            $$[$0-2].Nodo,
                                            {name: '=', val: '=', children: []},
                                            $$[$0].Nodo
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 38:
 
                                    
                                    var op = new Operation(1, _$[$0-2].first_column, TypeOperation.DIFERENTE)
                                    op.saveBinaryOp($$[$0-2], $$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [
                                            $$[$0-2].Nodo,
                                            {name: '!=', val: '!=', children: []},
                                            $$[$0].Nodo
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 39:
 
                                    console.log({E1: $$[$0-2], op: $$[$0-1], E2: $$[$0]})
                                    var op = new Operation(1, _$[$0-2].first_column, TypeOperation.MENOR)
                                    op.saveBinaryOp($$[$0-2], $$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [
                                            $$[$0-2].Nodo,
                                            {name: '<', val: '<', children: []},
                                            $$[$0].Nodo
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 40:
 
                                    
                                    var op = new Operation(1, _$[$0-2].first_column, TypeOperation.MAYOR)
                                    op.saveBinaryOp($$[$0-2], $$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [
                                            $$[$0-2].Nodo,
                                            {name: '>', val: '>', children: []},
                                            $$[$0].Nodo
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 41:
 
                                    
                                    var op = new Operation(1, _$[$0-2].first_column, TypeOperation.MENOR_IGUAL)
                                    op.saveBinaryOp($$[$0-2], $$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [
                                            $$[$0-2].Nodo,
                                            {name: '<=', val: '<=', children: []},
                                            $$[$0].Nodo
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 42:
 
                                    
                                    var op = new Operation(1, _$[$0-2].first_column, TypeOperation.MAYOR_IGUAL)
                                    op.saveBinaryOp($$[$0-2], $$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [
                                            $$[$0-2].Nodo,
                                            {name: '>=', val: '>=', children: []},
                                            $$[$0].Nodo
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 43:
 
                                    
                                    var op = new Operation(1, _$[$0-2].first_column, TypeOperation.OR)
                                    op.saveBinaryOp($$[$0-2], $$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [
                                            $$[$0-2].Nodo,
                                            {name: 'or', val: 'or', children: []},
                                            $$[$0].Nodo
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 44:
 
                                    
                                    var op = new Operation(1, _$[$0-2].first_column, TypeOperation.AND)
                                    op.saveBinaryOp($$[$0-2], $$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [
                                            $$[$0-2].Nodo,
                                            {name: 'and', val: 'and', children: []},
                                            $$[$0].Nodo
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 45:
 
                                    
                                    var op = new Operation(1, _$[$0-2].first_column, TypeOperation.MOD)
                                    op.saveBinaryOp($$[$0-2], $$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [
                                            $$[$0-2].Nodo,
                                            {name: 'mod', val: 'mod', children: []},
                                            $$[$0].Nodo
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 46:
 
                                    this.$ = $$[$0-1] 
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [
                                            {name: '(', val: '(', children: []},
                                            $$[$0-1].Nodo,
                                            {name: ')', val: ')', children: []},
                                        ]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 47:
 
                                    var op = new Operation(1, _$[$0].first_column, TypeOperation.DOUBLE)
                                    op.savePrimitiveOp($$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [{name: 'double', val: $$[$0], children: []}]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 48:
 
                                    var op = new Operation(1, _$[$0].first_column, TypeOperation.INTEGER)
                                    op.savePrimitiveOp($$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [{name: 'integer', val: $$[$0], children: []}]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 49:
 
                                    var op = new Operation(1, _$[$0].first_column, TypeOperation.STRING)
                                    op.savePrimitiveOp($$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [{name: 'string', val: $$[$0], children: []}]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 50:
 
                                    var op = new Operation(1, _$[$0].first_column, TypeOperation.ID)
                                    op.savePrimitiveOp($$[$0])
                                    this.$ = op
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [{name: 'id', val: 'id', children: []}]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 51:
 
                                    this.$ = new Operation('LAST'.first_line, _$[$0-2].first_column, TypeOperation.LAST) 
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [{name: 'last()', val: 'last()', children: []}]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 52:
 
                                    this.$ = new Operation('POSITION'.first_line, _$[$0-2].first_column, TypeOperation.POSITION) 
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [{name: 'position()', val: 'position()', children: []}]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 53:
 
                                    this.$ = new Operation('TEXT'.first_line, _$[$0-2].first_column, TypeOperation.TEXT) 
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [{name: 'text()', val: 'text()', children: []}]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 54:
 
                                    this.$ = new Operation('NODE'.first_line, _$[$0-2].first_column, TypeOperation.NODE) 
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [{name: 'node()', val: 'node()', children: []}]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
case 55:
 
                                    this.$ = new Operation($$[$0].name, $$[$0].linea, $$[$0].columna, TypeOperation.ATRIBUTO) 
                                    var nodo = {
                                        name: 'E',
                                        val: 'E',
                                        children: [$$[$0].Nodo]
                                    }
                                    this.$ = {...this.$, Nodo: nodo}
                                
break;
}
},
table: [o($V0,$V1,{3:1,4:2,7:3,8:4,9:5,11:$V2}),{1:[3]},{5:[1,7],6:[1,8]},o($V3,[2,3]),o($V0,$V1,{9:9,5:$V4,6:$V4,11:$V2}),{2:$V5,10:10,12:$V6,14:$V7,16:$V8,17:$V9,18:$Va,19:$Vb,20:$Vc,21:$Vd,22:$Ve,23:$Vf,24:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:27,31:$Vm},o($V0,[2,8],{11:[1,30]}),{1:[2,1]},o($V0,$V1,{8:4,9:5,7:31,11:$V2}),{2:$V5,10:32,12:$V6,14:$V7,16:$V8,17:$V9,18:$Va,19:$Vb,20:$Vc,21:$Vd,22:$Ve,23:$Vf,24:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:27,31:$Vm},o($Vn,[2,6]),o($Vn,[2,10],{13:33,33:[1,34]}),{15:[1,35]},{15:[1,36]},{15:[1,37]},{15:[1,38]},{15:[1,39]},{15:[1,40]},{15:[1,41]},{15:[1,42]},{15:[1,43]},{15:[1,44]},{15:[1,45]},{15:[1,46]},o($Vn,[2,24]),o($Vn,[2,25]),o($Vn,[2,26]),o($Vn,[2,27]),o($Vn,[2,28]),{12:[1,48],27:[1,49],32:47},o($V0,[2,7]),o($V3,[2,2]),o($Vn,[2,5]),o($Vn,[2,11]),{12:$Vo,30:60,31:$Vm,34:50,48:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{12:[1,61]},{12:[1,62]},{12:[1,63]},{12:[1,64]},{12:[1,65]},{12:[1,66]},{12:[1,67]},{12:[1,68]},{12:[1,69]},{12:[1,70]},{12:[1,71]},{12:[1,72]},o($Vx,[2,29]),o($Vx,[2,30]),o($Vx,[2,31]),{27:$Vy,35:[1,73],36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK},{12:$Vo,30:60,31:$Vm,34:87,48:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},o($VL,[2,47]),o($VL,[2,48]),o($VL,[2,49]),o($VL,[2,50]),{48:[1,88]},{48:[1,89]},{48:[1,90]},{48:[1,91]},o($VL,[2,55]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),o($Vn,[2,20]),o($Vn,[2,21]),o($Vn,[2,22]),o($Vn,[2,23]),o($Vn,[2,32]),{12:$Vo,30:60,31:$Vm,34:92,48:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{12:$Vo,30:60,31:$Vm,34:93,48:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{12:$Vo,30:60,31:$Vm,34:94,48:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{12:$Vo,30:60,31:$Vm,34:95,48:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{12:$Vo,30:60,31:$Vm,34:96,48:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{12:$Vo,30:60,31:$Vm,34:97,48:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{12:$Vo,30:60,31:$Vm,34:98,48:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{12:$Vo,30:60,31:$Vm,34:99,48:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{12:$Vo,30:60,31:$Vm,34:100,48:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{12:$Vo,30:60,31:$Vm,34:101,48:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{12:$Vo,30:60,31:$Vm,34:102,48:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{12:$Vo,30:60,31:$Vm,34:103,48:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{12:$Vo,30:60,31:$Vm,34:104,48:$Vp,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw},{27:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,49:[1,105]},{49:[1,106]},{49:[1,107]},{49:[1,108]},{49:[1,109]},o($VM,[2,33],{27:$Vy,38:$VB,47:$VK}),o($VM,[2,34],{27:$Vy,38:$VB,47:$VK}),o($VL,[2,35]),o($VL,[2,36]),o($VN,[2,37],{27:$Vy,36:$Vz,37:$VA,38:$VB,47:$VK}),o($VN,[2,38],{27:$Vy,36:$Vz,37:$VA,38:$VB,47:$VK}),o($VN,[2,39],{27:$Vy,36:$Vz,37:$VA,38:$VB,47:$VK}),o($VN,[2,40],{27:$Vy,36:$Vz,37:$VA,38:$VB,47:$VK}),o($VN,[2,41],{27:$Vy,36:$Vz,37:$VA,38:$VB,47:$VK}),o($VN,[2,42],{27:$Vy,36:$Vz,37:$VA,38:$VB,47:$VK}),o([35,45,49],[2,43],{27:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,46:$VJ,47:$VK}),o([35,45,46,49],[2,44],{27:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,47:$VK}),o($VL,[2,45]),o($VL,[2,46]),o($VL,[2,51]),o($VL,[2,52]),o($VL,[2,53]),o($VL,[2,54])],
defaultActions: {7:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        const { Error } = require('../Errores/Error')
        const { Element, Filter, Operation, TypeElement, TypeOperation } = require('../Instrucciones/Element/Element')

        var xPathAscSyntaxErrors = []
        var xPathAscLexerErrors = []
        var xPathAscAST_nodes
        var xPathAscAST_path
        var xPathAscAST_pathAux
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 53
break;
case 2:return 'resAttr'
break;
case 3:return 56
break;
case 4:return 55
break;
case 5:return 54
break;
case 6:return 14
break;
case 7:return 16
break;
case 8:return 17
break;
case 9:return 18
break;
case 10:return 19
break;
case 11:return 20
break;
case 12:return 21
break;
case 13:return 22
break;
case 14:return 23
break;
case 15:return 24
break;
case 16:return 25
break;
case 17:return 26
break;
case 18:return 38
break;
case 19:return 47
break;
case 20:return 'oPor'
break;
case 21:return 46
break;
case 22:return 36
break;
case 23:return 37
break;
case 24:return 27
break;
case 25:return 39
break;
case 26:return 40
break;
case 27:return 41
break;
case 28:return 42
break;
case 29:return 43
break;
case 30:return 44
break;
case 31:return 11
break;
case 32:return 6
break;
case 33:return 29
break;
case 34:return 28
break;
case 35:return 15
break;
case 36:return 31
break;
case 37:return 33
break;
case 38:return 35
break;
case 39:return 48
break;
case 40:return 49
break;
case 41:return 50;
break;
case 42:return 51;
break;
case 43:return 12;
break;
case 44:return 52
break;
case 45:return 5
break;
case 46:
                                                            var lexerAscError = new Error(
                                                                yy_.yytext, 
                                                                yy_.yylloc.first_line, 
                                                                yy_.yylloc.first_column, 
                                                                'Error léxico'
                                                            );
                                                            xPathAscSyntaxErrors.push(lexerAscError)
                                                        
break;
}
},
rules: [/^(?:\s+)/i,/^(?:last\b)/i,/^(?:attr\b)/i,/^(?:node\b)/i,/^(?:text\b)/i,/^(?:position\b)/i,/^(?:parent\b)/i,/^(?:child\b)/i,/^(?:self\b)/i,/^(?:preceding\b)/i,/^(?:preceding-sibling\b)/i,/^(?:attribute\b)/i,/^(?:descendant\b)/i,/^(?:descendant-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:folowing\b)/i,/^(?:folowing-sibling\b)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\/)/i,/^(?:\|)/i,/^(?:\.)/i,/^(?:\.\.)/i,/^(?:::)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xpathAsc;
exports.Parser = xpathAsc.Parser;
exports.parse = function () { return xpathAsc.parse.apply(xpathAsc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}