/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_XML_ASC = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,9],$V2=[1,13],$V3=[1,16],$V4=[1,17],$V5=[12,15],$V6=[2,40],$V7=[1,22],$V8=[2,9,12,13,15],$V9=[1,33],$Va=[1,32],$Vb=[2,9],$Vc=[1,47],$Vd=[1,59],$Ve=[1,60],$Vf=[1,55],$Vg=[1,52],$Vh=[1,54],$Vi=[1,56],$Vj=[1,50],$Vk=[1,51],$Vl=[1,53],$Vm=[1,57],$Vn=[1,58],$Vo=[1,61],$Vp=[1,62],$Vq=[1,67],$Vr=[1,65],$Vs=[1,66],$Vt=[2,8],$Vu=[8,9,10,12,13,15,19,21,23,31,32,33,34,35],$Vv=[2,8,9,10,12,13,15,19,21,23,31,32,33,34,35],$Vw=[2,5,8],$Vx=[2,21],$Vy=[2,56],$Vz=[1,95],$VA=[1,96],$VB=[2,23],$VC=[1,101],$VD=[1,102];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"RAIZ":4,"EOF":5,"HEAD":6,"OBJETO":7,"lt":8,"qst":9,"xml":10,"LATRIBUTOS":11,"gt":12,"identifier":13,"OBJETOS":14,"div":15,"CONTENIDO_OBJ":16,"ATRIBUTOS":17,"ATRIBUTO":18,"asig":19,"FIN_ATRIBUTO":20,"qmrk":21,"CONTENIDO_ATRB":22,"apost":23,"CONTENIDO_ATRB_SMPL":24,"VALUES_CONT_OBJ":25,"VALUE":26,"LISTA_CONT_ATRB":27,"VALUES_CONT_ATRB":28,"LISTA_CONT_ATRB_SMPL":29,"VALUES_CONT_ATRB_SMPL":30,"contentH":31,"double":32,"integer":33,"minus":34,"Escape":35,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"lt",9:"qst",10:"xml",12:"gt",13:"identifier",15:"div",19:"asig",21:"qmrk",23:"apost",31:"contentH",32:"double",33:"integer",34:"minus",35:"Escape"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[6,6],[6,6],[6,6],[6,6],[6,6],[6,6],[7,9],[7,8],[7,9],[7,5],[7,9],[7,9],[7,9],[7,9],[7,9],[7,9],[7,8],[7,8],[7,8],[7,8],[7,8],[7,8],[7,9],[7,9],[7,9],[7,9],[7,9],[7,9],[7,5],[7,5],[7,5],[14,2],[14,1],[14,1],[11,1],[11,0],[17,2],[17,1],[18,3],[18,3],[20,3],[20,3],[20,3],[20,3],[20,3],[16,2],[16,1],[25,1],[25,1],[25,1],[22,1],[22,0],[27,2],[27,1],[28,1],[28,1],[28,1],[24,1],[24,0],[29,2],[29,1],[30,1],[30,1],[30,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
                                                                                    reporteGramatical.push('<tr> <td>START</td> <td>RAIZ</td> </tr>');
                                                                                    this.$ = { objeto: $$[$0-1].objeto,
                                                                                        nodos: $$[$0-1].nodo,
                                                                                        erroresSemanticos: erroresSemanticos,
                                                                                        erroresLexicos: erroresLexicos,
                                                                                        erroresSintacticos: erroresSintacticos,
                                                                                        reporteGramatical: reporteGramatical
                                                                                        };
                                                                                    erroresLexicos = [];
                                                                                    erroresSintacticos = [];
                                                                                    erroresSemanticos = [];
                                                                                    reporteGramatical = [];
                                                                                    return this.$;
                                                                               
break;
case 2:

                                                                                    this.$ = { nodo: new Nodo('RAIZ',[$$[$0-1].nodo,$$[$0].nodo]), objeto: [$$[$0-1].objeto,$$[$0].objeto]};
                                                                                    reporteGramatical.push('<tr> <td>RAIZ</td> <td>HEAD OBJETO</td> </tr>');
                                                                               
break;
case 3:

                                                                                    this.$ = { nodo: new Nodo('RAIZ',[$$[$0].nodo]), objeto: [$$[$0].objeto]};
                                                                                    reporteGramatical.push('<tr> <td>RAIZ</td> <td>OBJETO</td> </tr>');
                                                                               
break;
case 4:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-1].first_line + ' y columna: ' + _$[$0-1].first_column + ': No se pudo recuperar el encabezado'));
                                                                                    this.$ = { nodo: new Nodo('RAIZ',[$$[$0].nodo]), objeto: [$$[$0].objeto]};
                                                                                    reporteGramatical.push('<tr> <td>RAIZ</td> <td>ERROR OBJETO</td> </tr>');
                                                                               
break;
case 5:

                                                                                    this.$ = { nodo: new Nodo('HEAD',[new Nodo('lt',[]),new Nodo('qst',[]),new Nodo('xml',[]),$$[$0-2].nodo,new Nodo('qst',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-3],'',_$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2].objeto,[],Etiqueta.HEADER)};
                                                                                    reporteGramatical.push('<tr> <td>HEAD</td> <td>lt qst xml LATRIBUTOS qst gt</td> </tr>');
                                                                               
break;
case 6:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-5].first_line + ' y columna: ' + _$[$0-5].first_column + ': Falta < del head'));
                                                                                    this.$ = { nodo: new Nodo('HEAD',[new Nodo('ERROR',[]),new Nodo('qst',[]),new Nodo('xml',[]),$$[$0-2].nodo,new Nodo('qst',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-3],'',_$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2].objeto,[],Etiqueta.HEADER)};
                                                                                    reporteGramatical.push('<tr> <td>HEAD</td> <td>ERROR qst xml LATRIBUTOS qst gt</td> </tr>');
                                                                               
break;
case 7:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-5].first_line + ' y columna: ' + _$[$0-5].first_column + ': Falta ? inicial del head'));
                                                                                    this.$ = { nodo: new Nodo('HEAD',[new Nodo('lt',[]),new Nodo('ERROR',[]),new Nodo('xml',[]),$$[$0-2].nodo,new Nodo('qst',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-3],'',_$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2].objeto,[],Etiqueta.HEADER)};
                                                                                    reporteGramatical.push('<tr> <td>HEAD</td> <td>lt ERROR xml LATRIBUTOS qst gt</td> </tr>');
                                                                               
break;
case 8:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-5].first_line + ' y columna: ' + _$[$0-5].first_column + ': Falta id xml del head'));
                                                                                    this.$ = { nodo: new Nodo('HEAD',[new Nodo('lt',[]),new Nodo('qst',[]),new Nodo('ERROR',[]),$$[$0-2].nodo,new Nodo('qst',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-3],'',_$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2].objeto,[],Etiqueta.HEADER)};
                                                                                    reporteGramatical.push('<tr> <td>HEAD</td> <td>lt qst ERROR LATRIBUTOS qst gt</td> </tr>');
                                                                               
break;
case 9:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-5].first_line + ' y columna: ' + _$[$0-5].first_column + ': Falta ? final del head'));
                                                                                    this.$ = { nodo: new Nodo('HEAD',[new Nodo('lt',[]),new Nodo('qst',[]),new Nodo('xml',[]),$$[$0-2].nodo,new Nodo('ERROR',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-3],'',_$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2].objeto,[],Etiqueta.HEADER)};
                                                                                    reporteGramatical.push('<tr> <td>HEAD</td> <td>lt qst xml LATRIBUTOS ERROR gt</td> </tr>');
                                                                               
break;
case 10:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-5].first_line + ' y columna: ' + _$[$0-5].first_column + ': Falta > final del head'));
                                                                                    this.$ = { nodo: new Nodo('HEAD',[new Nodo('lt',[]),new Nodo('qst',[]),new Nodo('xml',[]),$$[$0-2].nodo,new Nodo('qst',[]),new Nodo('ERROR',[]) ]), objeto: new Objeto($$[$0-3],'',_$[$0-5].first_line, _$[$0-5].first_column,$$[$0-2].objeto,[],Etiqueta.HEADER)};
                                                                                    reporteGramatical.push('<tr> <td>HEAD</td> <td>lt qst xml LATRIBUTOS qst ERROR</td> </tr>');
                                                                               
break;
case 11:

                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-6].nodo,new Nodo('gt',[]),$$[$0-4].nodo,new Nodo('lt',[]),new Nodo('div',[]),new Nodo('identifier',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-7],'',_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6].objeto,$$[$0-4].objeto,Etiqueta.DOBLE)};
                                                                                    if($$[$0-7] !== $$[$0-1]){
                                                                                        erroresSemanticos.push(new Error('Error Semantico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ':  No coinciden las etiquetas de apertura y final. ' + $$[$0-7] + ' y ' + $$[$0-1] ));
                                                                                    }
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS gt OBJETOS lt div identifier gt</td> </tr>');
                                                                               
break;
case 12:
 
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-5].nodo,new Nodo('gt',[]),new Nodo('lt',[]),new Nodo('div',[]),new Nodo('identifier',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-6],'',_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5].objeto,[],Etiqueta.DOBLE)};
                                                                                    if($$[$0-6] !== $$[$0-1]){
                                                                                        erroresSemanticos.push(new Error('Error Semantico en linea ' + _$[$0-7].first_line + ' y columna: ' + _$[$0-7].first_column + ':  No coinciden las etiquetas de apertura y final. ' + $$[$0-6] + ' y ' + $$[$0-1] ));
                                                                                    }
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS gt lt div identifier gt</td> </tr>');
                                                                               
break;
case 13:
 
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-6].nodo,new Nodo('gt',[]),$$[$0-4].nodo,new Nodo('lt',[]),new Nodo('div',[]),new Nodo('identifier',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-7],$$[$0-4].objeto,_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-6].objeto,[],Etiqueta.DOBLE)};
                                                                                    if($$[$0-7] !== $$[$0-1]){
                                                                                        erroresSemanticos.push(new Error('Error Semantico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ':  No coinciden las etiquetas de apertura y final. ' + $$[$0-7] + ' y ' + $$[$0-1] ));
                                                                                    }
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS gt CONTENIDO_OBJ lt div identifier gt</td> </tr>');
                                                                               
break;
case 14:

                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-2].nodo,new Nodo('div',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-3],'',_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2].objeto,[],Etiqueta.UNICA)};
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS div gt</td> </tr>');
                                                                               
break;
case 15:
 
                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ': Falta < etiqueta de inicio'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('ERROR',[]),new Nodo('identifier',[]),$$[$0-6].nodo,new Nodo('gt',[]),$$[$0-4].nodo,new Nodo('lt',[]),new Nodo('div',[]),new Nodo('identifier',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-7],'',_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6].objeto,$$[$0-4].objeto,Etiqueta.DOBLE)};
                                                                                    if($$[$0-7] !== $$[$0-1]){
                                                                                        erroresSemanticos.push(new Error('Error Semantico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ':  No coinciden las etiquetas de apertura y final. ' + $$[$0-7] + ' y ' + $$[$0-1] ));
                                                                                    }
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>ERROR identifier LATRIBUTOS gt OBJETOS lt div identifier gt</td> </tr>');
                                                                               
break;
case 16:
 
                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ': Falta id de inicio de etiqueta'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('ERROR',[]),$$[$0-6].nodo,new Nodo('gt',[]),$$[$0-4].nodo,new Nodo('lt',[]),new Nodo('div',[]),new Nodo('identifier',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-1],'',_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6].objeto,$$[$0-4].objeto,Etiqueta.DOBLE)};
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt ERROR LATRIBUTOS gt OBJETOS lt div identifier gt</td> </tr>');
                                                                               
break;
case 17:
 
                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ': Falta > etiqueta de inicio'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-6].nodo,new Nodo('ERROR',[]),$$[$0-4].nodo,new Nodo('lt',[]),new Nodo('div',[]),new Nodo('identifier',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-7],'',_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6].objeto,$$[$0-4].objeto,Etiqueta.DOBLE)};
                                                                                    if($$[$0-7] !== $$[$0-1]){
                                                                                        erroresSemanticos.push(new Error('Error Semantico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ':  No coinciden las etiquetas de apertura y final. ' + $$[$0-7] + ' y ' + $$[$0-1] ));
                                                                                    }
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS ERROR OBJETOS lt div identifier gt</td> </tr>');
                                                                               
break;
case 18:
 
                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ': Falta / cierre de etiqueta'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-6].nodo,new Nodo('gt',[]),$$[$0-4].nodo,new Nodo('lt',[]),new Nodo('ERROR',[]),new Nodo('identifier',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-7],'',_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6].objeto,$$[$0-4].objeto,Etiqueta.DOBLE)};
                                                                                    if($$[$0-7] !== $$[$0-1]){
                                                                                        erroresSemanticos.push(new Error('Error Semantico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ':  No coinciden las etiquetas de apertura y final. ' + $$[$0-7] + ' y ' + $$[$0-1] ));
                                                                                    }
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS gt OBJETOS lt ERROR identifier gt</td> </tr>');
                                                                               
break;
case 19:
 
                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ': Falta id cierre de etiqueta'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-6].nodo,new Nodo('gt',[]),$$[$0-4].nodo,new Nodo('lt',[]),new Nodo('div',[]),new Nodo('ERROR',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-7],'',_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6].objeto,$$[$0-4].objeto,Etiqueta.DOBLE)};
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS gt OBJETOS lt div ERROR gt</td> </tr>');
                                                                               
break;
case 20:
 
                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ': Falta > cierre de etiqueta'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-6].nodo,new Nodo('gt',[]),$$[$0-4].nodo,new Nodo('lt',[]),new Nodo('div',[]),new Nodo('identifier',[]),new Nodo('ERROR',[]) ]), objeto: new Objeto($$[$0-7],'',_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6].objeto,$$[$0-4].objeto,Etiqueta.DOBLE)};
                                                                                    if($$[$0-7] !== $$[$0-1]){
                                                                                        erroresSemanticos.push(new Error('Error Semantico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ':  No coinciden las etiquetas de apertura y final. ' + $$[$0-7] + ' y ' + $$[$0-1] ));
                                                                                    }
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS gt OBJETOS lt div identifier ERROR</td> </tr>');
                                                                               
break;
case 21:
 
                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-7].first_line + ' y columna: ' + _$[$0-7].first_column + ': Falta etiqueta < de inicio'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('ERROR',[]),new Nodo('identifier',[]),$$[$0-5].nodo,new Nodo('gt',[]),new Nodo('lt',[]),new Nodo('div',[]),new Nodo('identifier',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-6],'',_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5].objeto,[],Etiqueta.DOBLE)};
                                                                                    if($$[$0-6] !== $$[$0-1]){
                                                                                        erroresSemanticos.push(new Error('Error Semantico en linea ' + _$[$0-7].first_line + ' y columna: ' + _$[$0-7].first_column + ':  No coinciden las etiquetas de apertura y final. ' + $$[$0-6] + ' y ' + $$[$0-1] ));
                                                                                    }
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>ERROR identifier LATRIBUTOS gt lt div identifier gt</td> </tr>');
                                                                               
break;
case 22:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-7].first_line + ' y columna: ' + _$[$0-7].first_column + ': Falta id de inicio de etiqueta'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('ERROR',[]),$$[$0-5].nodo,new Nodo('gt',[]),new Nodo('lt',[]),new Nodo('div',[]),new Nodo('identifier',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-1],'',_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5].objeto,[],Etiqueta.DOBLE)};
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt ERROR LATRIBUTOS gt lt div identifier gt</td> </tr>');
                                                                               
break;
case 23:
 
                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-7].first_line + ' y columna: ' + _$[$0-7].first_column + ': Falta > etiqueta inicio'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-5].nodo,new Nodo('ERROR',[]),new Nodo('lt',[]),new Nodo('div',[]),new Nodo('identifier',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-6],'',_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5].objeto,[],Etiqueta.DOBLE)};
                                                                                    if($$[$0-6] !== $$[$0-1]){
                                                                                        erroresSemanticos.push(new Error('Error Semantico en linea ' + _$[$0-7].first_line + ' y columna: ' + _$[$0-7].first_column + ':  No coinciden las etiquetas de apertura y final. ' + $$[$0-6] + ' y ' + $$[$0-1] ));
                                                                                    }
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS ERROR lt div identifier gt</td> </tr>');
                                                                               
break;
case 24:
 
                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-7].first_line + ' y columna: ' + _$[$0-7].first_column + ': Falta / fin de etiqueta'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-5].nodo,new Nodo('gt',[]),new Nodo('lt',[]),new Nodo('ERROR',[]),new Nodo('identifier',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-6],'',_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5].objeto,[],Etiqueta.DOBLE)};
                                                                                    if($$[$0-6] !== $$[$0-1]){
                                                                                        erroresSemanticos.push(new Error('Error Semantico en linea ' + _$[$0-7].first_line + ' y columna: ' + _$[$0-7].first_column + ':  No coinciden las etiquetas de apertura y final. ' + $$[$0-6] + ' y ' + $$[$0-1] ));
                                                                                    }
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS gt lt ERROR identifier gt</td> </tr>');
                                                                               
break;
case 25:
 
                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-7].first_line + ' y columna: ' + _$[$0-7].first_column + ': Falta id fin de etiqueta'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-5].nodo,new Nodo('gt',[]),new Nodo('lt',[]),new Nodo('div',[]),new Nodo('ERROR',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-6],'',_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5].objeto,[],Etiqueta.DOBLE)};
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS gt lt div ERROR gt</td> </tr>');
                                                                               
break;
case 26:
 
                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-7].first_line + ' y columna: ' + _$[$0-7].first_column + ': Falta > fin de etiqueta'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-5].nodo,new Nodo('gt',[]),new Nodo('lt',[]),new Nodo('div',[]),new Nodo('identifier',[]),new Nodo('ERROR',[]) ]), objeto: new Objeto($$[$0-6],'',_$[$0-7].first_line, _$[$0-7].first_column,$$[$0-5].objeto,[],Etiqueta.DOBLE)};
                                                                                    if($$[$0-6] !== $$[$0-1]){
                                                                                        erroresSemanticos.push(new Error('Error Semantico en linea ' + _$[$0-7].first_line + ' y columna: ' + _$[$0-7].first_column + ':  No coinciden las etiquetas de apertura y final. ' + $$[$0-6] + ' y ' + $$[$0-1] ));
                                                                                    }
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS gt lt div identifier ERROR</td> </tr>');
                                                                               
break;
case 27:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ': Falta etiqueta < de inicio'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('ERROR',[]),new Nodo('identifier',[]),$$[$0-6].nodo,new Nodo('gt',[]),$$[$0-4].nodo,new Nodo('lt',[]),new Nodo('div',[]),new Nodo('identifier',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-7],$$[$0-4].objeto,_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-6].objeto,[],Etiqueta.DOBLE)};
                                                                                    if($$[$0-7] !== $$[$0-1]){
                                                                                        erroresSemanticos.push(new Error('Error Semantico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ':  No coinciden las etiquetas de apertura y final. ' + $$[$0-7] + ' y ' + $$[$0-1] ));
                                                                                    }
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>ERROR identifier LATRIBUTOS gt CONTENIDO_OBJ lt div identifier gt</td> </tr>');
                                                                               
break;
case 28:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ': Falta id de inicio de etiqueta'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('ERROR',[]),$$[$0-6].nodo,new Nodo('gt',[]),$$[$0-4].nodo,new Nodo('lt',[]),new Nodo('div',[]),new Nodo('identifier',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-1],$$[$0-4].objeto,_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-6].objeto,[],Etiqueta.DOBLE)};
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt ERROR LATRIBUTOS gt CONTENIDO_OBJ lt div identifier gt</td> </tr>');
                                                                               
break;
case 29:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ': Falta > etiqueta de inicio'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-6].nodo,new Nodo('ERROR',[]),$$[$0-4].nodo,new Nodo('lt',[]),new Nodo('div',[]),new Nodo('identifier',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-7],$$[$0-4].objeto,_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-6].objeto,[],Etiqueta.DOBLE)};
                                                                                    if($$[$0-7] !== $$[$0-1]){
                                                                                        erroresSemanticos.push(new Error('Error Semantico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ':  No coinciden las etiquetas de apertura y final. ' + $$[$0-7] + ' y ' + $$[$0-1] ));
                                                                                    }
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS ERROR CONTENIDO_OBJ lt div identifier gt</td> </tr>');
                                                                               
break;
case 30:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ': Falta / etiqueta fin'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-6].nodo,new Nodo('gt',[]),$$[$0-4].nodo,new Nodo('lt',[]),new Nodo('ERROR',[]),new Nodo('identifier',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-7],$$[$0-4].objeto,_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-6].objeto,[],Etiqueta.DOBLE)};
                                                                                    if($$[$0-7] !== $$[$0-1]){
                                                                                        erroresSemanticos.push(new Error('Error Semantico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ':  No coinciden las etiquetas de apertura y final. ' + $$[$0-7] + ' y ' + $$[$0-1] ));
                                                                                    }
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS gt CONTENIDO_OBJ lt ERROR identifier gt</td> </tr>');
                                                                               
break;
case 31:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ': Falta id etiqueta fin'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-6].nodo,new Nodo('gt',[]),$$[$0-4].nodo,new Nodo('lt',[]),new Nodo('div',[]),new Nodo('ERROR',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-7],$$[$0-4].objeto,_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-6].objeto,[],Etiqueta.DOBLE)};
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS gt CONTENIDO_OBJ lt div ERROR gt</td> </tr>');
                                                                               
break;
case 32:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ': Falta > etiqueta fin'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-6].nodo,new Nodo('gt',[]),$$[$0-4].nodo,new Nodo('lt',[]),new Nodo('div',[]),new Nodo('identifier',[]),new Nodo('ERROR',[]) ]), objeto: new Objeto($$[$0-7],$$[$0-4].objeto,_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-6].objeto,[],Etiqueta.DOBLE)};
                                                                                    if($$[$0-7] !== $$[$0-1]){
                                                                                        erroresSemanticos.push(new Error('Error Semantico en linea ' + _$[$0-8].first_line + ' y columna: ' + _$[$0-8].first_column + ':  No coinciden las etiquetas de apertura y final. ' + $$[$0-7] + ' y ' + $$[$0-1] ));
                                                                                    }
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS gt CONTENIDO_OBJ lt div identifier ERROR</td> </tr>');
                                                                               
break;
case 33:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-4].first_line + ' y columna: ' + _$[$0-4].first_column + ': Falta etiqueta < de inicio'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('ERROR',[]),new Nodo('identifier',[]),$$[$0-2].nodo,new Nodo('div',[]),new Nodo('gt',[]) ]), objeto: new Objeto($$[$0-3],'',_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2].objeto,[],Etiqueta.UNICA)};
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>ERROR identifier LATRIBUTOS div gt</td> </tr>');
                                                                               
break;
case 34:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-4].first_line + ' y columna: ' + _$[$0-4].first_column + ': Falta id de inicio de etiqueta'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('ERROR',[]),$$[$0-2].nodo,new Nodo('div',[]),new Nodo('gt',[]) ]), objeto: new Objeto('ERROR','',_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2].objeto,[],Etiqueta.UNICA)};
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt ERROR LATRIBUTOS div gt</td> </tr>');
                                                                               
break;
case 35:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-4].first_line + ' y columna: ' + _$[$0-4].first_column + ': Falta > de cierre de etiqueta'));
                                                                                    this.$ = { nodo: new Nodo('OBJETO',[new Nodo('lt',[]),new Nodo('identifier',[]),$$[$0-2].nodo,new Nodo('div',[]),new Nodo('ERROR',[]) ]), objeto: new Objeto($$[$0-3],'',_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2].objeto,[],Etiqueta.UNICA)};
                                                                                    reporteGramatical.push('<tr style="background:' + getClr() + ';"> <td>OBJETO</td> <td>lt identifier LATRIBUTOS div ERROR</td> </tr>');
                                                                               
break;
case 36:

                                                                                    $$[$0-1].objeto.push($$[$0].objeto);
                                                                                    this.$ = { nodo: new Nodo('OBJETOS',[$$[$0-1].nodo,$$[$0].nodo]), objeto: $$[$0-1].objeto};
                                                                                    reporteGramatical.push('<tr> <td>OBJETOS</td> <td>OBJETOS OBJETO</td> </tr>');
                                                                               
break;
case 37:

                                                                                    this.$ = { nodo: new Nodo('OBJETOS',[$$[$0].nodo]), objeto: [$$[$0].objeto]};
                                                                                    reporteGramatical.push('<tr> <td>OBJETOS</td> <td>OBJETO</td> </tr>');
                                                                               
break;
case 38:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0].first_line + ' y columna: ' + _$[$0].first_column + ': No se pudo recuperar el objeto'));
                                                                                    this.$ = { nodo: new Nodo('ERROR',[]), objeto: undefined};
                                                                               
break;
case 39:

                                                                                    this.$ = { nodo: new Nodo('LATRIBUTOS',[$$[$0].nodo]), objeto: $$[$0].objeto};
                                                                                    reporteGramatical.push('<tr> <td>LATRIBUTOS</td> <td>ATRIBUTOS</td> </tr>');
                                                                               
break;
case 40:

                                                                                    this.$ = { nodo: new Nodo('LATRIBUTOS',[new Nodo('EpSiLoN',[])]), objeto: []};
                                                                                    reporteGramatical.push('<tr> <td>LATRIBUTOS</td> <td>Epsilon</td> </tr>');
                                                                               
break;
case 41:

                                                                                    $$[$0-1].objeto.push($$[$0].objeto);
                                                                                    this.$ = { nodo: new Nodo('ATRIBUTOS',[$$[$0-1].nodo,$$[$0].nodo]), objeto: $$[$0-1].objeto};
                                                                                    reporteGramatical.push('<tr> <td>ATRIBUTOS</td> <td>ATRIBUTOS ATRIBUTO</td> </tr>');
                                                                               
break;
case 42:

                                                                                    this.$ = { nodo: new Nodo('ATRIBUTOS',[$$[$0].nodo]), objeto: [$$[$0].objeto]};
                                                                                    reporteGramatical.push('<tr> <td>ATRIBUTOS</td> <td>ATRIBUTO</td> </tr>');
                                                                               
break;
case 43:

                                                                                    this.$ = { nodo: new Nodo('ATRIBUTO',[new Nodo('identifier',[]),new Nodo('asig',[]),$$[$0].nodo]), objeto: new Atributo($$[$0-2], $$[$0].objeto.valor, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0].objeto.comilla)};
                                                                                    reporteGramatical.push('<tr> <td>ATRIBUTO</td> <td>identifier asig FIN_ATRIBUTO</td> </tr>');
                                                                               
break;
case 44:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-2].first_line + ' y columna: ' + _$[$0-2].first_column + ': El atributo falta ='));
                                                                                    this.$ = { nodo: new Nodo('ATRIBUTO',[new Nodo('identifier',[]),new Nodo('ERROR',[]),$$[$0].nodo]), objeto: new Atributo($$[$0-2], $$[$0].objeto.valor, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0].objeto.comilla)};
                                                                                    reporteGramatical.push('<tr> <td>ATRIBUTO</td> <td>identifier ERROR FIN_ATRIBUTO</td> </tr>');
                                                                               
break;
case 45:

                                                                                    this.$ = { nodo: new Nodo('FIN_ATRIBUTO',[new Nodo('qmrk',[]),$$[$0-1].nodo,new Nodo('qmrk',[])]), objeto: new Atributo('', $$[$0-1].objeto, _$[$0-2].first_line, _$[$0-2].first_column, Comilla.DOBLE)};
                                                                                    reporteGramatical.push('<tr> <td>FIN_ATRIBUTO</td> <td>qmrk CONTENIDO_ATRB qmrk</td> </tr>');
                                                                               
break;
case 46:
 
                                                                                    this.$ = { nodo: new Nodo('FIN_ATRIBUTO',[new Nodo('apost',[]),$$[$0-1].nodo,new Nodo('apost',[])]), objeto: new Atributo('', $$[$0-1].objeto, _$[$0-2].first_line, _$[$0-2].first_column, Comilla.SIMPLE)};
                                                                                    reporteGramatical.push('<tr> <td>FIN_ATRIBUTO</td> <td>apost CONTENIDO_ATRB_SMPL apost</td> </tr>');
                                                                               
break;
case 47:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-2].first_line + ' y columna: ' + _$[$0-2].first_column + ': El atributo falta doble comilla inicial'));
                                                                                    this.$ = { nodo: new Nodo('FIN_ATRIBUTO',[new Nodo('ERROR',[]),$$[$0-1].nodo,new Nodo('qmrk',[])]), objeto: new Atributo('', $$[$0-1].objeto, _$[$0-2].first_line, _$[$0-2].first_column, Comilla.DOBLE)};
                                                                                    reporteGramatical.push('<tr> <td>FIN_ATRIBUTO</td> <td>ERROR CONTENIDO_ATRB qmrk</td> </tr>');
                                                                               
break;
case 48:

                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-2].first_line + ' y columna: ' + _$[$0-2].first_column + ': El atributo falta doble comilla final'));
                                                                                    this.$ = { nodo: new Nodo('FIN_ATRIBUTO',[new Nodo('qmrk',[]),$$[$0-1].nodo,new Nodo('ERROR',[])]), objeto: new Atributo('', $$[$0-1].objeto, _$[$0-2].first_line, _$[$0-2].first_column, Comilla.DOBLE)};
                                                                                    reporteGramatical.push('<tr> <td>FIN_ATRIBUTO</td> <td>qmrk CONTENIDO_ATRB ERROR</td> </tr>');
                                                                               
break;
case 49:
 
                                                                                    erroresSintacticos.push(new Error('Error Sintactico en linea ' + _$[$0-2].first_line + ' y columna: ' + _$[$0-2].first_column + ': El atributo falta comilla simple final'));
                                                                                    this.$ = { nodo: new Nodo('FIN_ATRIBUTO',[new Nodo('apost',[]),$$[$0-1].nodo,new Nodo('ERROR',[])]), objeto: new Atributo('', $$[$0-1].objeto, _$[$0-2].first_line, _$[$0-2].first_column, Comilla.SIMPLE)};
                                                                                    reporteGramatical.push('<tr> <td>FIN_ATRIBUTO</td> <td>apost CONTENIDO_ATRB_SMPL ERROR</td> </tr>');
                                                                               
break;
case 50:

                                                                                    if(_$[$0-1].last_line == _$[$0].first_line){ 
                                                                                        if(_$[$0-1].last_column < _$[$0].first_column ){
                                                                                            for(let i = 0, size = _$[$0].first_column - _$[$0-1].last_column; i < size; i++ ){
                                                                                                $$[$0-1].objeto = $$[$0-1].objeto + ' ';
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        for(let i = 0, size = _$[$0].first_line - _$[$0-1].last_line; i < size; i++ ){
                                                                                            $$[$0-1].objeto = $$[$0-1].objeto + '\n';
                                                                                        }
                                                                                    }
                                                                                    $$[$0-1].objeto = $$[$0-1].objeto + $$[$0].objeto;
                                                                                    this.$ = { nodo: new Nodo('CONTENIDO_OBJ',[$$[$0-1].nodo,$$[$0].nodo]), objeto: $$[$0-1].objeto};
                                                                                    reporteGramatical.push('<tr> <td>CONTENIDO_OBJ</td> <td>CONTENIDO_OBJ VALUES_CONT_OBJ</td> </tr>');
                                                                               
break;
case 51:

                                                                                    this.$ = { nodo: new Nodo('CONTENIDO_OBJ',[$$[$0].nodo]), objeto: $$[$0].objeto};
                                                                                    reporteGramatical.push('<tr> <td>CONTENIDO_OBJ</td> <td>VALUES_CONT_OBJ</td> </tr>');
                                                                               
break;
case 52:

                                                                                    this.$ = { nodo: new Nodo('VALUES_CONT_OBJ',[$$[$0].nodo]), objeto: $$[$0].objeto};
                                                                                    reporteGramatical.push('<tr> <td>VALUES_CONT_OBJ</td> <td>VALUE</td> </tr>');
                                                                               
break;
case 53:

                                                                                    this.$ = { nodo: new Nodo('VALUES_CONT_OBJ',[new Nodo('qmrk',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUES_CONT_OBJ</td> <td>qmrk</td> </tr>');
                                                                               
break;
case 54:

                                                                                    this.$ = { nodo: new Nodo('VALUES_CONT_OBJ',[new Nodo('apost',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUES_CONT_OBJ</td> <td>apost</td> </tr>');
                                                                               
break;
case 55:

                                                                                    this.$ = { nodo: new Nodo('CONTENIDO_ATRB',[$$[$0].nodo]), objeto: $$[$0].objeto};
                                                                                    reporteGramatical.push('<tr> <td>CONTENIDO_ATRB</td> <td>LISTA_CONT_ATRB</td> </tr>');
                                                                               
break;
case 56:

                                                                                    this.$ = { nodo: new Nodo('CONTENIDO_ATRB',[new Nodo('EpSiLoN',[])]), objeto: ''};
                                                                                    reporteGramatical.push('<tr> <td>CONTENIDO_ATRB</td> <td>Epsilon</td> </tr>');
                                                                               
break;
case 57:

                                                                                    if(_$[$0-1].last_line == _$[$0].first_line){ 
                                                                                        if(_$[$0-1].last_column < _$[$0].first_column ){
                                                                                            for(let i = 0, size = _$[$0].first_column - _$[$0-1].last_column; i < size; i++ ){
                                                                                                $$[$0-1].objeto = $$[$0-1].objeto + ' ';
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        for(let i = 0, size = _$[$0].first_line - _$[$0-1].last_line; i < size; i++ ){
                                                                                            $$[$0-1].objeto = $$[$0-1].objeto + '\n';
                                                                                        }
                                                                                    }
                                                                                    $$[$0-1].objeto = $$[$0-1].objeto + $$[$0].objeto;
                                                                                    this.$ = { nodo: new Nodo('LISTA_CONT_ATRB',[$$[$0-1].nodo,$$[$0].nodo]), objeto: $$[$0-1].objeto};
                                                                                    reporteGramatical.push('<tr> <td>LISTA_CONT_ATRB</td> <td>LISTA_CONT_ATRB VALUES_CONT_ATRB</td> </tr>');
                                                                               
break;
case 58:

                                                                                    this.$ = { nodo: new Nodo('LISTA_CONT_ATRB',[$$[$0].nodo]), objeto: $$[$0].objeto};
                                                                                    reporteGramatical.push('<tr> <td>LISTA_CONT_ATRB</td> <td>VALUES_CONT_ATRB</td> </tr>');
                                                                               
break;
case 59:

                                                                                    this.$ = { nodo: new Nodo('VALUES_CONT_ATRB',[$$[$0].nodo]), objeto: $$[$0].objeto};
                                                                                    reporteGramatical.push('<tr> <td>VALUES_CONT_ATRB</td> <td>VALUE</td> </tr>');
                                                                               
break;
case 60:

                                                                                    this.$ = { nodo: new Nodo('VALUES_CONT_ATRB',[new Nodo('lt',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUES_CONT_ATRB</td> <td>lt</td> </tr>');
                                                                               
break;
case 61:

                                                                                    this.$ = { nodo: new Nodo('VALUES_CONT_ATRB',[new Nodo('apost',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUES_CONT_ATRB</td> <td>apost</td> </tr>');
                                                                               
break;
case 62:

                                                                                    this.$ = { nodo: new Nodo('CONTENIDO_ATRB_SMPL',[$$[$0].nodo]), objeto: $$[$0].objeto};
                                                                                    reporteGramatical.push('<tr> <td>CONTENIDO_ATRB_SMPL</td> <td>LISTA_CONT_ATRB_SMPL</td> </tr>');
                                                                               
break;
case 63:

                                                                                    this.$ = { nodo: new Nodo('CONTENIDO_ATRB_SMPL',[new Nodo('EpSiLoN',[])]), objeto: ''};
                                                                                    reporteGramatical.push('<tr> <td>CONTENIDO_ATRB_SMPL</td> <td>Epsilon</td> </tr>');
                                                                               
break;
case 64:

                                                                                    if(_$[$0-1].last_line == _$[$0].first_line){ 
                                                                                        if(_$[$0-1].last_column < _$[$0].first_column ){
                                                                                            for(let i = 0, size = _$[$0].first_column - _$[$0-1].last_column; i < size; i++ ){
                                                                                                $$[$0-1].objeto = $$[$0-1].objeto + ' ';
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        for(let i = 0, size = _$[$0].first_line - _$[$0-1].last_line; i < size; i++ ){
                                                                                            $$[$0-1].objeto = $$[$0-1].objeto + '\n';
                                                                                        }
                                                                                    }
                                                                                    $$[$0-1].objeto = $$[$0-1].objeto + $$[$0].objeto;
                                                                                    this.$ = { nodo: new Nodo('LISTA_CONT_ATRB_SMPL',[$$[$0-1].nodo,$$[$0].nodo]), objeto: $$[$0-1].objeto};
                                                                                    reporteGramatical.push('<tr> <td>LISTA_CONT_ATRB_SMPL</td> <td>LISTA_CONT_ATRB_SMPL VALUES_CONT_ATRB_SMPL</td> </tr>');
                                                                               
break;
case 65:

                                                                                    this.$ = { nodo: new Nodo('LISTA_CONT_ATRB_SMPL',[$$[$0].nodo]), objeto: $$[$0].objeto};
                                                                                    reporteGramatical.push('<tr> <td>LISTA_CONT_ATRB_SMPL</td> <td>VALUES_CONT_ATRB_SMPL</td> </tr>');
                                                                               
break;
case 66:

                                                                                    this.$ = { nodo: new Nodo('VALUES_CONT_ATRB_SMPL',[$$[$0].nodo]), objeto: $$[$0].objeto};
                                                                                    reporteGramatical.push('<tr> <td>VALUES_CONT_ATRB_SMPL</td> <td>VALUE</td> </tr>');
                                                                               
break;
case 67:

                                                                                    this.$ = { nodo: new Nodo('VALUES_CONT_ATRB_SMPL',[new Nodo('lt',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUES_CONT_ATRB_SMPL</td> <td>lt</td> </tr>');
                                                                               
break;
case 68:

                                                                                    this.$ = { nodo: new Nodo('VALUES_CONT_ATRB_SMPL',[new Nodo('qmrk',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUES_CONT_ATRB_SMPL</td> <td>qmrk</td> </tr>');
                                                                               
break;
case 69:

                                                                                    this.$ = { nodo: new Nodo('VALUE',[new Nodo('identifier',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUE</td> <td>identifier</td> </tr>');
                                                                               
break;
case 70:

                                                                                    this.$ = { nodo: new Nodo('VALUE',[new Nodo('contentH',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUE</td> <td>contentH</td> </tr>');
                                                                               
break;
case 71:

                                                                                    this.$ = { nodo: new Nodo('VALUE',[new Nodo('div',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUE</td> <td>div</td> </tr>');
                                                                               
break;
case 72:

                                                                                    this.$ = { nodo: new Nodo('VALUE',[new Nodo('gt',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUE</td> <td>gt</td> </tr>');
                                                                               
break;
case 73:

                                                                                    this.$ = { nodo: new Nodo('VALUE',[new Nodo('asig',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUE</td> <td>asig</td> </tr>');
                                                                               
break;
case 74:

                                                                                    this.$ = { nodo: new Nodo('VALUE',[new Nodo('double',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUE</td> <td>double</td> </tr>');
                                                                               
break;
case 75:

                                                                                    this.$ = { nodo: new Nodo('VALUE',[new Nodo('integer',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUE</td> <td>integer</td> </tr>');
                                                                               
break;
case 76:

                                                                                    this.$ = { nodo: new Nodo('VALUE',[new Nodo('qst',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUE</td> <td>qst</td> </tr>');
                                                                               
break;
case 77:

                                                                                    this.$ = { nodo: new Nodo('VALUE',[new Nodo('xml',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUE</td> <td>xml</td> </tr>');
                                                                               
break;
case 78:

                                                                                    this.$ = { nodo: new Nodo('VALUE',[new Nodo('minus',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUE</td> <td>minus</td> </tr>');
                                                                               
break;
case 79:

                                                                                    this.$ = { nodo: new Nodo('VALUE',[new Nodo('Escape',[])]), objeto: $$[$0]};
                                                                                    reporteGramatical.push('<tr> <td>VALUE</td> <td>Escape</td> </tr>');
                                                                               
break;
}
},
table: [{2:[1,5],3:1,4:2,6:3,7:4,8:[1,6]},{1:[3]},{5:[1,7]},{2:$V0,7:8,8:$V1},{5:[2,3]},{2:$V0,7:11,8:$V1,9:[1,12],13:$V2},{2:[1,15],9:[1,14],13:$V3},{1:[2,1]},{5:[2,2]},{2:$V4,13:$V3},{13:$V2},{5:[2,4]},{10:[1,18]},o($V5,$V6,{11:19,17:20,18:21,13:$V7}),{2:[1,24],10:[1,23]},o($V5,$V6,{17:20,18:21,11:26,10:[1,25],13:$V7}),o([2,12,15],$V6,{17:20,18:21,11:27,13:$V7}),o($V5,$V6,{17:20,18:21,11:26,13:$V7}),{9:$V6,11:28,13:$V7,17:20,18:21},{12:[1,29],15:[1,30]},o([2,9,12,15],[2,39],{18:31,13:$V7}),o($V8,[2,42]),{2:$V9,19:$Va},o($Vb,$V6,{17:20,18:21,11:34,13:$V7}),{9:$V6,11:35,13:$V7,17:20,18:21},{9:$V6,11:36,13:$V7,17:20,18:21},{12:[1,37],15:[1,38]},{2:[1,41],12:[1,39],15:[1,40]},{9:[1,42]},{2:$Vc,7:46,8:[1,44],9:$Vd,10:$Ve,12:$Vf,13:$Vg,14:43,15:$Vh,16:45,19:$Vi,21:$Vj,23:$Vk,25:48,26:49,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp},{12:[1,63]},o($V8,[2,41]),{2:$Vq,20:64,21:$Vr,23:$Vs},{2:$Vq,20:68,21:$Vr,23:$Vs},{2:[1,70],9:[1,69]},{9:[1,71]},{9:[1,72]},{2:$Vc,7:46,8:[1,74],9:$Vd,10:$Ve,12:$Vf,13:$Vg,14:73,15:$Vh,16:75,19:$Vi,21:$Vj,23:$Vk,25:48,26:49,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp},{12:[1,76]},{2:$Vc,7:46,8:[1,78],9:$Vd,10:$Ve,12:$Vf,13:$Vg,14:77,15:$Vh,16:79,19:$Vi,21:$Vj,23:$Vk,25:48,26:49,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp},{2:[1,81],12:[1,80]},{2:$Vc,7:46,8:[1,83],9:$Vd,10:$Ve,12:$Vf,13:$Vg,14:82,15:$Vh,16:84,19:$Vi,21:$Vj,23:$Vk,25:48,26:49,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp},{12:[1,85]},{2:$V0,7:87,8:[1,86]},{2:$V4,13:$V3,15:[1,88]},{8:[1,89],9:$Vd,10:$Ve,12:$Vf,13:$Vg,15:$Vh,19:$Vi,21:$Vj,23:$Vk,25:90,26:49,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp},o($Vt,[2,37]),o($Vt,[2,38],{13:$V2}),o($Vu,[2,51]),o($Vu,[2,52]),o($Vu,[2,53]),o($Vu,[2,54]),o($Vv,[2,69]),o($Vv,[2,70]),o($Vv,[2,71]),o($Vv,[2,72]),o($Vv,[2,73]),o($Vv,[2,74]),o($Vv,[2,75]),o($Vv,[2,76]),o($Vv,[2,77]),o($Vv,[2,78]),o($Vv,[2,79]),o($Vw,[2,33]),o($V8,[2,43]),o($Vx,$Vy,{22:91,27:92,28:93,26:94,8:$Vz,9:$Vd,10:$Ve,12:$Vf,13:$Vg,15:$Vh,19:$Vi,23:$VA,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp}),o($VB,[2,63],{24:97,29:98,30:99,26:100,8:$VC,9:$Vd,10:$Ve,12:$Vf,13:$Vg,15:$Vh,19:$Vi,21:$VD,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp}),{8:$Vz,9:$Vd,10:$Ve,12:$Vf,13:$Vg,15:$Vh,19:$Vi,21:$Vy,22:103,23:$VA,26:94,27:92,28:93,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp},o($V8,[2,44]),{2:[1,105],12:[1,104]},{12:[1,106]},{12:[1,107]},{12:[1,108]},{2:$V0,7:87,8:[1,109]},{2:$V4,13:$V3,15:[1,110]},{8:[1,111],9:$Vd,10:$Ve,12:$Vf,13:$Vg,15:$Vh,19:$Vi,21:$Vj,23:$Vk,25:90,26:49,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp},o($Vw,[2,34]),{2:$V0,7:87,8:[1,112]},{2:[1,114],13:$V3,15:[1,113]},{8:[1,115],9:$Vd,10:$Ve,12:$Vf,13:$Vg,15:$Vh,19:$Vi,21:$Vj,23:$Vk,25:90,26:49,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp},o($Vw,[2,14]),o($Vw,[2,35]),{2:$V0,7:87,8:[1,116]},{2:$V4,13:$V3,15:[1,117]},{8:[1,118],9:$Vd,10:$Ve,12:$Vf,13:$Vg,15:$Vh,19:$Vi,21:$Vj,23:$Vk,25:90,26:49,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp},o($Vt,[2,6]),{2:$V4,13:$V3,15:[1,119]},o($Vt,[2,36]),{13:[1,120]},{15:[1,121]},o($Vu,[2,50]),{2:[1,123],21:[1,122]},o($Vx,[2,55],{26:94,28:124,8:$Vz,9:$Vd,10:$Ve,12:$Vf,13:$Vg,15:$Vh,19:$Vi,23:$VA,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp}),o($Vv,[2,58]),o($Vv,[2,59]),o($Vv,[2,60]),o($Vv,[2,61]),{2:[1,126],23:[1,125]},o($VB,[2,62],{26:100,30:127,8:$VC,9:$Vd,10:$Ve,12:$Vf,13:$Vg,15:$Vh,19:$Vi,21:$VD,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp}),o($Vv,[2,65]),o($Vv,[2,66]),o($Vv,[2,67]),o($Vv,[2,68]),{21:[1,128]},o($Vt,[2,5]),o($Vt,[2,10]),o($Vt,$Vb),o($Vt,$Vt),o($Vt,[2,7]),{2:$V4,13:$V3,15:[1,129]},{13:[1,130]},{15:[1,131]},{2:[1,133],13:$V3,15:[1,132]},{2:[1,135],13:[1,134]},o($V5,$V6,{17:20,18:21,11:26,13:[1,136]}),{2:[1,138],15:[1,137]},{2:$V4,13:$V3,15:[1,139]},{13:[1,140]},{15:[1,141]},{13:[1,142]},{12:[1,143]},{13:[1,144]},o($V8,[2,45]),o($V8,[2,48]),o($Vv,[2,57]),o($V8,[2,46]),o($V8,[2,49]),o($Vv,[2,64]),o($V8,[2,47]),{13:[1,145]},{12:[1,146]},{13:[1,147]},{2:[1,149],13:[1,148]},o($V5,$V6,{17:20,18:21,11:26,13:[1,150]}),{2:[1,152],12:[1,151]},{12:[1,153]},{2:$V9,12:[1,154],19:$Va},{2:[1,156],13:[1,155]},{13:[1,157]},{13:[1,158]},{12:[1,159]},{13:[1,160]},{12:[1,161]},o($Vw,$Vx),{12:[1,162]},{12:[1,163]},o($Vw,[2,22]),{12:[1,164]},{2:[1,166],12:[1,165]},{12:[1,167]},{2:$V9,12:[1,168],19:$Va},o($Vw,[2,12]),o($Vw,[2,26]),o($Vw,[2,25]),o($Vw,[2,24]),{2:[1,170],12:[1,169]},{12:[1,171]},{12:[1,172]},{12:[1,173]},o($Vw,$VB),{12:[1,174]},o($Vw,[2,15]),o($Vw,[2,27]),o($Vw,[2,16]),o($Vw,[2,28]),o($Vw,[2,11]),o($Vw,[2,20]),o($Vw,[2,19]),o($Vw,[2,18]),o($Vw,[2,13]),o($Vw,[2,32]),o($Vw,[2,31]),o($Vw,[2,30]),o($Vw,[2,17]),o($Vw,[2,29])],
defaultActions: {4:[2,3],7:[2,1],8:[2,2],11:[2,4]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Nodo} = require("../AST/Nodo");
    const {Error} = require("../Errores/Error");
    const {Objeto, Etiqueta} = require("../Expresiones/Objeto");
    const {Atributo, Comilla} = require("../Expresiones/Atributo");

    var erroresSemanticos = [];
    var erroresSintacticos = [];
    var erroresLexicos = [];
    var reporteGramatical = [];

    function getClr(){
        return "#000000".replace(/0/g,function(){return (~~(Math.random()*16)).toString(16);});
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('comment');
break;
case 1:this.popState();
break;
case 2:/* skip comment content*/
break;
case 3:/* skip whitespace */
break;
case 4:return 15;
break;
case 5:return 8;
break;
case 6:return 12;
break;
case 7:return 19;
break;
case 8:return 9;
break;
case 9:return 34;
break;
case 10:return 10;
break;
case 11:return 21;
break;
case 12:return 23;
break;
case 13:return 31;
break;
case 14:return 13;
break;
case 15:return 32;
break;
case 16:return 33;
break;
case 17:return 35;
break;
case 18:
                                        erroresLexicos.push(new Error('Error Lexico en linea ' + yy_.yylloc.first_line + ' y columna: ' + yy_.yylloc.first_column + ': ' + yy_.yytext));
                                        //console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 19:return 5;
break;
}
},
rules: [/^(?:<!--)/i,/^(?:-->)/i,/^(?:.)/i,/^(?:\s+)/i,/^(?:\/)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:-)/i,/^(?:xml\b)/i,/^(?:")/i,/^(?:')/i,/^(?:[^a-zA-Z_0-9ñÑ\-</>=\"?'~@#]+)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ\-]*)/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:(\\([\'\"\\bfnrtv])))/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"inclusive":true},"Etiqueta":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_XML_ASC;
exports.Parser = gramatica_XML_ASC.Parser;
exports.parse = function () { return gramatica_XML_ASC.parse.apply(gramatica_XML_ASC, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}